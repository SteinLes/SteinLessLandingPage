{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useState } from 'react';\n\nconst useVisibilty = ref => {\n  _s();\n\n  const [isVisible, setIsVisible] = useState(false);\n\n  const getProgress = (setValue, value, count, intervalTime) => {\n    if (isVisible) {\n      const interval = intervalTime || 50;\n      const timer = setInterval(() => {\n        setValue(oldProgress => {\n          const countDiff = count || 10;\n          const diff = Math.random() * countDiff;\n          return Math.min(oldProgress + diff, value);\n        });\n      }, interval);\n      return () => {\n        clearInterval(timer);\n      };\n    }\n  };\n\n  const observer = new IntersectionObserver(_ref => {\n    let [entry] = _ref;\n    return setIsVisible(entry.isIntersecting);\n  });\n  useEffect(() => {\n    if (ref !== null && ref !== void 0 && ref.current) {\n      observer.observe(ref.current);\n      return () => {\n        observer.disconnect();\n      };\n    }\n  }, []);\n  return [isVisible, (setValue, value, count, intervalTime) => getProgress(setValue, value, count, intervalTime)];\n};\n\n_s(useVisibilty, \"J3yJOyGdBT4L7hs1p1XQYVGMdrY=\");\n\nexport default useVisibilty;","map":{"version":3,"names":["useEffect","useState","useVisibilty","ref","isVisible","setIsVisible","getProgress","setValue","value","count","intervalTime","interval","timer","setInterval","oldProgress","countDiff","diff","Math","random","min","clearInterval","observer","IntersectionObserver","entry","isIntersecting","current","observe","disconnect"],"sources":["/home/ash/Desktop/landingPageResponsiva/src/hooks/useVisibility.ts"],"sourcesContent":["import React, { SetStateAction, useEffect, useState } from 'react';\n\nconst useVisibilty = (\n  ref: React.MutableRefObject<undefined>\n): [\n  boolean,\n  (\n    setValue: SetStateAction<any>,\n    value: number,\n    count?: number | undefined,\n    intervalTime?: number | undefined\n  ) => void\n] => {\n  const [isVisible, setIsVisible] = useState(false);\n\n  const getProgress = (\n    setValue: SetStateAction<any>,\n    value: number,\n    count?: number,\n    intervalTime?: number\n  ) => {\n    if (isVisible) {\n      const interval = intervalTime || 50;\n      const timer = setInterval(() => {\n        setValue((oldProgress: number) => {\n          const countDiff = count || 10;\n          const diff = Math.random() * countDiff;\n          return Math.min(oldProgress + diff, value);\n        });\n      }, interval);\n\n      return () => {\n        clearInterval(timer);\n      };\n    }\n  };\n\n  const observer = new IntersectionObserver(([entry]) =>\n    setIsVisible(entry.isIntersecting)\n  );\n\n  useEffect(() => {\n    if (ref?.current) {\n      observer.observe(ref.current);\n      return () => {\n        observer.disconnect();\n      };\n    }\n  }, []);\n\n  return [\n    isVisible,\n    (\n      setValue: SetStateAction<any>,\n      value: number,\n      count?: number,\n      intervalTime?: number\n    ) => getProgress(setValue, value, count, intervalTime),\n  ];\n};\n\nexport default useVisibilty;\n"],"mappings":";;AAAA,SAAgCA,SAAhC,EAA2CC,QAA3C,QAA2D,OAA3D;;AAEA,MAAMC,YAAY,GAChBC,GADmB,IAUhB;EAAA;;EACH,MAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BJ,QAAQ,CAAC,KAAD,CAA1C;;EAEA,MAAMK,WAAW,GAAG,CAClBC,QADkB,EAElBC,KAFkB,EAGlBC,KAHkB,EAIlBC,YAJkB,KAKf;IACH,IAAIN,SAAJ,EAAe;MACb,MAAMO,QAAQ,GAAGD,YAAY,IAAI,EAAjC;MACA,MAAME,KAAK,GAAGC,WAAW,CAAC,MAAM;QAC9BN,QAAQ,CAAEO,WAAD,IAAyB;UAChC,MAAMC,SAAS,GAAGN,KAAK,IAAI,EAA3B;UACA,MAAMO,IAAI,GAAGC,IAAI,CAACC,MAAL,KAAgBH,SAA7B;UACA,OAAOE,IAAI,CAACE,GAAL,CAASL,WAAW,GAAGE,IAAvB,EAA6BR,KAA7B,CAAP;QACD,CAJO,CAAR;MAKD,CANwB,EAMtBG,QANsB,CAAzB;MAQA,OAAO,MAAM;QACXS,aAAa,CAACR,KAAD,CAAb;MACD,CAFD;IAGD;EACF,CApBD;;EAsBA,MAAMS,QAAQ,GAAG,IAAIC,oBAAJ,CAAyB;IAAA,IAAC,CAACC,KAAD,CAAD;IAAA,OACxClB,YAAY,CAACkB,KAAK,CAACC,cAAP,CAD4B;EAAA,CAAzB,CAAjB;EAIAxB,SAAS,CAAC,MAAM;IACd,IAAIG,GAAJ,aAAIA,GAAJ,eAAIA,GAAG,CAAEsB,OAAT,EAAkB;MAChBJ,QAAQ,CAACK,OAAT,CAAiBvB,GAAG,CAACsB,OAArB;MACA,OAAO,MAAM;QACXJ,QAAQ,CAACM,UAAT;MACD,CAFD;IAGD;EACF,CAPQ,EAON,EAPM,CAAT;EASA,OAAO,CACLvB,SADK,EAEL,CACEG,QADF,EAEEC,KAFF,EAGEC,KAHF,EAIEC,YAJF,KAKKJ,WAAW,CAACC,QAAD,EAAWC,KAAX,EAAkBC,KAAlB,EAAyBC,YAAzB,CAPX,CAAP;AASD,CAzDD;;GAAMR,Y;;AA2DN,eAAeA,YAAf"},"metadata":{},"sourceType":"module"}